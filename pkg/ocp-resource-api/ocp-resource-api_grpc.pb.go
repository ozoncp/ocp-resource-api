// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_resource_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpResourceApiClient is the client API for OcpResourceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpResourceApiClient interface {
	// Return list of resource
	CreateResourceV1(ctx context.Context, in *CreateResourceRequestV1, opts ...grpc.CallOption) (*ResourceV1, error)
	// Return description of resource by id
	DescribeResourceV1(ctx context.Context, in *DescribeResourceRequestV1, opts ...grpc.CallOption) (*ResourceV1, error)
	// 小reate new resource
	ListResourcesV1(ctx context.Context, in *ListResourcesRequestV1, opts ...grpc.CallOption) (*ListResourcesResponseV1, error)
	// 小reate few new resources
	RemoveResourceV1(ctx context.Context, in *RemoveResourceRequestV1, opts ...grpc.CallOption) (*RemoveResourceResponseV1, error)
}

type ocpResourceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpResourceApiClient(cc grpc.ClientConnInterface) OcpResourceApiClient {
	return &ocpResourceApiClient{cc}
}

func (c *ocpResourceApiClient) CreateResourceV1(ctx context.Context, in *CreateResourceRequestV1, opts ...grpc.CallOption) (*ResourceV1, error) {
	out := new(ResourceV1)
	err := c.cc.Invoke(ctx, "/ocp.resource.api.OcpResourceApi/CreateResourceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpResourceApiClient) DescribeResourceV1(ctx context.Context, in *DescribeResourceRequestV1, opts ...grpc.CallOption) (*ResourceV1, error) {
	out := new(ResourceV1)
	err := c.cc.Invoke(ctx, "/ocp.resource.api.OcpResourceApi/DescribeResourceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpResourceApiClient) ListResourcesV1(ctx context.Context, in *ListResourcesRequestV1, opts ...grpc.CallOption) (*ListResourcesResponseV1, error) {
	out := new(ListResourcesResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.resource.api.OcpResourceApi/ListResourcesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpResourceApiClient) RemoveResourceV1(ctx context.Context, in *RemoveResourceRequestV1, opts ...grpc.CallOption) (*RemoveResourceResponseV1, error) {
	out := new(RemoveResourceResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.resource.api.OcpResourceApi/RemoveResourceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpResourceApiServer is the server API for OcpResourceApi service.
// All implementations must embed UnimplementedOcpResourceApiServer
// for forward compatibility
type OcpResourceApiServer interface {
	// Return list of resource
	CreateResourceV1(context.Context, *CreateResourceRequestV1) (*ResourceV1, error)
	// Return description of resource by id
	DescribeResourceV1(context.Context, *DescribeResourceRequestV1) (*ResourceV1, error)
	// 小reate new resource
	ListResourcesV1(context.Context, *ListResourcesRequestV1) (*ListResourcesResponseV1, error)
	// 小reate few new resources
	RemoveResourceV1(context.Context, *RemoveResourceRequestV1) (*RemoveResourceResponseV1, error)
	mustEmbedUnimplementedOcpResourceApiServer()
}

// UnimplementedOcpResourceApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpResourceApiServer struct {
}

func (UnimplementedOcpResourceApiServer) CreateResourceV1(context.Context, *CreateResourceRequestV1) (*ResourceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceV1 not implemented")
}
func (UnimplementedOcpResourceApiServer) DescribeResourceV1(context.Context, *DescribeResourceRequestV1) (*ResourceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeResourceV1 not implemented")
}
func (UnimplementedOcpResourceApiServer) ListResourcesV1(context.Context, *ListResourcesRequestV1) (*ListResourcesResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourcesV1 not implemented")
}
func (UnimplementedOcpResourceApiServer) RemoveResourceV1(context.Context, *RemoveResourceRequestV1) (*RemoveResourceResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResourceV1 not implemented")
}
func (UnimplementedOcpResourceApiServer) mustEmbedUnimplementedOcpResourceApiServer() {}

// UnsafeOcpResourceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpResourceApiServer will
// result in compilation errors.
type UnsafeOcpResourceApiServer interface {
	mustEmbedUnimplementedOcpResourceApiServer()
}

func RegisterOcpResourceApiServer(s grpc.ServiceRegistrar, srv OcpResourceApiServer) {
	s.RegisterService(&OcpResourceApi_ServiceDesc, srv)
}

func _OcpResourceApi_CreateResourceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpResourceApiServer).CreateResourceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.resource.api.OcpResourceApi/CreateResourceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpResourceApiServer).CreateResourceV1(ctx, req.(*CreateResourceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpResourceApi_DescribeResourceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeResourceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpResourceApiServer).DescribeResourceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.resource.api.OcpResourceApi/DescribeResourceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpResourceApiServer).DescribeResourceV1(ctx, req.(*DescribeResourceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpResourceApi_ListResourcesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpResourceApiServer).ListResourcesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.resource.api.OcpResourceApi/ListResourcesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpResourceApiServer).ListResourcesV1(ctx, req.(*ListResourcesRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpResourceApi_RemoveResourceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveResourceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpResourceApiServer).RemoveResourceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.resource.api.OcpResourceApi/RemoveResourceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpResourceApiServer).RemoveResourceV1(ctx, req.(*RemoveResourceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpResourceApi_ServiceDesc is the grpc.ServiceDesc for OcpResourceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpResourceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.resource.api.OcpResourceApi",
	HandlerType: (*OcpResourceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResourceV1",
			Handler:    _OcpResourceApi_CreateResourceV1_Handler,
		},
		{
			MethodName: "DescribeResourceV1",
			Handler:    _OcpResourceApi_DescribeResourceV1_Handler,
		},
		{
			MethodName: "ListResourcesV1",
			Handler:    _OcpResourceApi_ListResourcesV1_Handler,
		},
		{
			MethodName: "RemoveResourceV1",
			Handler:    _OcpResourceApi_RemoveResourceV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-resource-api/ocp-resource-api.proto",
}
