// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-resource-api/ocp-resource-api.proto

package ocp_resource_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ResourceV1 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ResourceV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Status

	return nil
}

// ResourceV1ValidationError is the validation error returned by
// ResourceV1.Validate if the designated constraints aren't met.
type ResourceV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceV1ValidationError) ErrorName() string { return "ResourceV1ValidationError" }

// Error satisfies the builtin error interface
func (e ResourceV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceV1ValidationError{}

// Validate checks the field values on CreateResourceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateResourceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Status

	return nil
}

// CreateResourceRequestV1ValidationError is the validation error returned by
// CreateResourceRequestV1.Validate if the designated constraints aren't met.
type CreateResourceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceRequestV1ValidationError) ErrorName() string {
	return "CreateResourceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceRequestV1ValidationError{}

// Validate checks the field values on CreateResourceResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateResourceResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Status

	return nil
}

// CreateResourceResponseV1ValidationError is the validation error returned by
// CreateResourceResponseV1.Validate if the designated constraints aren't met.
type CreateResourceResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceResponseV1ValidationError) ErrorName() string {
	return "CreateResourceResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceResponseV1ValidationError{}

// Validate checks the field values on DescribeResourceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeResourceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResourceId

	return nil
}

// DescribeResourceRequestV1ValidationError is the validation error returned by
// DescribeResourceRequestV1.Validate if the designated constraints aren't met.
type DescribeResourceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeResourceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeResourceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeResourceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeResourceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeResourceRequestV1ValidationError) ErrorName() string {
	return "DescribeResourceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeResourceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeResourceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeResourceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeResourceRequestV1ValidationError{}

// Validate checks the field values on ListResourcesRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListResourcesRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListResourcesRequestV1ValidationError is the validation error returned by
// ListResourcesRequestV1.Validate if the designated constraints aren't met.
type ListResourcesRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcesRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcesRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcesRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcesRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcesRequestV1ValidationError) ErrorName() string {
	return "ListResourcesRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcesRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcesRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcesRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcesRequestV1ValidationError{}

// Validate checks the field values on ListResourcesResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListResourcesResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResourcesResponseV1ValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListResourcesResponseV1ValidationError is the validation error returned by
// ListResourcesResponseV1.Validate if the designated constraints aren't met.
type ListResourcesResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcesResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcesResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcesResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcesResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcesResponseV1ValidationError) ErrorName() string {
	return "ListResourcesResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcesResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcesResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcesResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcesResponseV1ValidationError{}

// Validate checks the field values on RemoveResourceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveResourceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResourceId

	return nil
}

// RemoveResourceRequestV1ValidationError is the validation error returned by
// RemoveResourceRequestV1.Validate if the designated constraints aren't met.
type RemoveResourceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveResourceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveResourceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveResourceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveResourceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveResourceRequestV1ValidationError) ErrorName() string {
	return "RemoveResourceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveResourceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveResourceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveResourceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveResourceRequestV1ValidationError{}

// Validate checks the field values on RemoveResourceResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveResourceResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveResourceResponseV1ValidationError is the validation error returned by
// RemoveResourceResponseV1.Validate if the designated constraints aren't met.
type RemoveResourceResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveResourceResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveResourceResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveResourceResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveResourceResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveResourceResponseV1ValidationError) ErrorName() string {
	return "RemoveResourceResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveResourceResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveResourceResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveResourceResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveResourceResponseV1ValidationError{}

// Validate checks the field values on MultiCreateResourceRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateResourceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateResourceRequestV1ValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateResourceRequestV1ValidationError is the validation error returned
// by MultiCreateResourceRequestV1.Validate if the designated constraints
// aren't met.
type MultiCreateResourceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateResourceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateResourceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateResourceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateResourceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateResourceRequestV1ValidationError) ErrorName() string {
	return "MultiCreateResourceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateResourceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateResourceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateResourceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateResourceRequestV1ValidationError{}

// Validate checks the field values on MultiCreateResourceResponseV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateResourceResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Added

	return nil
}

// MultiCreateResourceResponseV1ValidationError is the validation error
// returned by MultiCreateResourceResponseV1.Validate if the designated
// constraints aren't met.
type MultiCreateResourceResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateResourceResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateResourceResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateResourceResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateResourceResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateResourceResponseV1ValidationError) ErrorName() string {
	return "MultiCreateResourceResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateResourceResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateResourceResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateResourceResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateResourceResponseV1ValidationError{}

// Validate checks the field values on UpdateResourceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateResourceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResourceRequestV1ValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateResourceRequestV1ValidationError is the validation error returned by
// UpdateResourceRequestV1.Validate if the designated constraints aren't met.
type UpdateResourceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRequestV1ValidationError) ErrorName() string {
	return "UpdateResourceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRequestV1ValidationError{}

// Validate checks the field values on UpdateResourceFieldsV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateResourceFieldsV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Status

	return nil
}

// UpdateResourceFieldsV1ValidationError is the validation error returned by
// UpdateResourceFieldsV1.Validate if the designated constraints aren't met.
type UpdateResourceFieldsV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceFieldsV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceFieldsV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceFieldsV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceFieldsV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceFieldsV1ValidationError) ErrorName() string {
	return "UpdateResourceFieldsV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceFieldsV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceFieldsV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceFieldsV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceFieldsV1ValidationError{}
